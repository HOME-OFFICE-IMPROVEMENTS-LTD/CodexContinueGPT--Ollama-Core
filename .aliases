#!/bin/bash
# CodexContinueGPT Aliases
# Source this file to load project-specific aliases
# Usage: source .aliases

# Define the project root dynamically
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Git aliases
alias gs='git status'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gp='git pull'
alias gpu='git push'
alias gf='git fetch'
alias gl='git log --oneline --graph --decorate --all'
alias glo='git log --oneline --decorate'
alias grs='git remote -v'

# Ollama Manager aliases - using absolute paths
alias om="$PROJECT_ROOT/tools/ollama/ollama_manager.sh"
alias om-list="$PROJECT_ROOT/tools/ollama/ollama_manager.sh list"
alias om-pull="$PROJECT_ROOT/tools/ollama/ollama_manager.sh pull"
alias om-update="$PROJECT_ROOT/tools/ollama/ollama_manager.sh update"
alias om-start="$PROJECT_ROOT/tools/ollama/ollama_manager.sh start"
alias om-docker="$PROJECT_ROOT/tools/ollama/ollama_manager.sh docker"
alias om-recommend="$PROJECT_ROOT/tools/ollama/ollama_manager.sh recommend"

# Ollama convenience aliases
alias ollama-help="$PROJECT_ROOT/ollama-commands.sh"
alias ollama-start="$PROJECT_ROOT/ollama-docker-start.sh"

# Direct Ollama model query functions (better than function-based aliases)
ask() {
  ollama run codellama "$*"
}

ask-llama() {
  ollama run llama3 "$*"
}

ask-code() {
  ollama run codellama "$*"
}

ask-any() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: ask-any MODEL_NAME \"your question\""
    return 1
  fi
  local model="$1"
  shift
  ollama run "$model" "$*"
}

# Advanced ask script aliases
alias askm="$PROJECT_ROOT/tools/ollama/ask.sh"
alias ask-models="$PROJECT_ROOT/tools/ollama/ask.sh --list"

# Shell Helper aliases
alias sh-help="$PROJECT_ROOT/tools/ollama/shell_helper.sh"

# Shell helper functions for better argument handling
sh-explain() {
  "$PROJECT_ROOT/tools/ollama/shell_helper.sh" --explain "$*"
}

sh-script() {
  "$PROJECT_ROOT/tools/ollama/shell_helper.sh" --script "$*"
}

# Agent command aliases
alias code-assistant="$PROJECT_ROOT/agent-commands.sh code"
alias shell-helper="$PROJECT_ROOT/agent-commands.sh shell"
alias task-manager="$PROJECT_ROOT/agent-commands.sh tasks"
alias audit-code="$PROJECT_ROOT/agent-commands.sh audit"
alias git-helper="$PROJECT_ROOT/agent-commands.sh git"
alias decision-audit="$PROJECT_ROOT/agent-commands.sh decision"

# Shell Agent aliases
alias shell-agent="$PROJECT_ROOT/run-shell-agent.sh"
alias code-audit="$PROJECT_ROOT/run-shell-agent.sh --audit"
alias task-track="$PROJECT_ROOT/run-shell-agent.sh --tasks"
alias build-agent="$PROJECT_ROOT/build-shell-agent.sh"
alias launch-agent="$PROJECT_ROOT/launch-shell-agent.sh"

# Quick project navigation for CodexContinueGPT
alias cdcc="cd $PROJECT_ROOT"
alias cdcc-docs="cd $PROJECT_ROOT/docs"
alias cdcc-configs="cd $PROJECT_ROOT/configs"

# Model Context Protocol (MCP) server aliases
alias mcp-start="$PROJECT_ROOT/tools/ollama/start_mcp_server.sh"
alias mcp-start-codellama="$PROJECT_ROOT/tools/ollama/start_mcp_server.sh --model codellama --port 8000"
alias mcp-start-llama3="$PROJECT_ROOT/tools/ollama/start_mcp_server.sh --model llama3 --port 8000"
alias mcp-dbgpt="cd $PROJECT_ROOT && uv run dbgpt start webserver --config configs/dbgpt-proxy-ollama-mcp.toml"

# Enhanced MCP server aliases
alias mcp-enhanced="$PROJECT_ROOT/tools/ollama/start_enhanced_mcp_server.sh"
alias mcp-enhanced-codellama="$PROJECT_ROOT/tools/ollama/start_enhanced_mcp_server.sh --model codellama --port 8000"
alias mcp-enhanced-llama3="$PROJECT_ROOT/tools/ollama/start_enhanced_mcp_server.sh --model llama3 --port 8000"
alias mcp-test="$PROJECT_ROOT/tools/ollama/test_enhanced_mcp_server.py"
alias mcp-benchmark="$PROJECT_ROOT/tools/ollama/benchmark_mcp_server.sh"

# Enhanced Shell Agent aliases
alias shell-enhanced="$PROJECT_ROOT/tools/ollama/enhanced_shell_agent.sh"
alias shell-enhanced-code="$PROJECT_ROOT/tools/ollama/enhanced_shell_agent.sh --mode code"
alias shell-enhanced-creative="$PROJECT_ROOT/tools/ollama/enhanced_shell_agent.sh --mode creative"
alias mcp-memory="$PROJECT_ROOT/tools/ollama/mcp_memory_agent.sh"
alias mcp-memory-start="$PROJECT_ROOT/tools/ollama/mcp_memory_agent.sh start"
alias mcp-memory-ask="$PROJECT_ROOT/tools/ollama/mcp_memory_agent.sh ask"
alias mcp-memory-remember="$PROJECT_ROOT/tools/ollama/mcp_memory_agent.sh remember"

# Agent Memory System aliases
alias agent-memory="$PROJECT_ROOT/agent-memory.sh"
alias agent-submit="$PROJECT_ROOT/agent-memory.sh submit"
alias agent-tasks="$PROJECT_ROOT/agent-memory.sh tasks"
alias agent-output="$PROJECT_ROOT/agent-memory.sh output"
alias agent-notifications="$PROJECT_ROOT/agent-memory.sh notifications"
alias agent-init="$PROJECT_ROOT/agent-memory.sh initialize"
alias agent-patch="$PROJECT_ROOT/agent-memory.sh patch"

# Memory Manager aliases
alias memory-stats="$PROJECT_ROOT/agent-memory-manager.sh stats"
alias memory-clean="$PROJECT_ROOT/agent-memory-manager.sh clean"
alias memory-export="$PROJECT_ROOT/agent-memory-manager.sh export"
alias memory-worker="$PROJECT_ROOT/agent-memory-manager.sh worker"
alias memory-help="$PROJECT_ROOT/agent-memory-manager.sh help"
alias demo-cowork="$PROJECT_ROOT/agent-coworking-demo.sh"

# Co-working aliases for quick task submission
code-cowork() {
  "$PROJECT_ROOT/agent-memory.sh" submit code "$*"
}

shell-cowork() {
  "$PROJECT_ROOT/agent-memory.sh" submit shell "$*"
}

audit-cowork() {
  if [ $# -lt 2 ]; then
    echo "Usage: audit-cowork <file> \"task description\""
    return 1
  fi
  local file="$1"
  shift
  local content=$(cat "$file")
  "$PROJECT_ROOT/agent-memory.sh" submit audit "Please audit this code from $file: 
  
\`\`\`
$content
\`\`\`

$*"
}

git-cowork() {
  "$PROJECT_ROOT/agent-memory.sh" submit git "$*"
}

decision-cowork() {
  "$PROJECT_ROOT/agent-memory.sh" submit decision "$*"
}

# Print available aliases
alias cchelp='cat "$PROJECT_ROOT/.aliases" | grep -E "^alias|^[a-zA-Z0-9_-]+\(\)" | sed "s/alias //g" | sort'

# Print available agent aliases
alias agent-help='echo -e "Agent Commands:\ncode-assistant, shell-helper, task-manager, audit-code, git-helper, decision-audit\n\nAgent Memory Commands:\nagent-memory, agent-submit, agent-tasks, agent-output, agent-notifications, agent-init\n\nCo-working Commands:\ncode-cowork, shell-cowork, audit-cowork, git-cowork, decision-cowork\n\nMemory Manager Commands:\nmemory-stats, memory-clean, memory-export, memory-worker, memory-help, demo-cowork"'

# Attach this to the cchelp output
echo "CodexContinueGPT aliases loaded! Type 'cchelp' to see all available commands, or 'agent-help' for agent commands."
